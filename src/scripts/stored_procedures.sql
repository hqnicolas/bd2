CREATE OR REPLACE FUNCTION pr_count_apolices(cod_cliente INT) RETURNS INT AS $$ DECLARE     resultado INT; BEGIN     SELECT COUNT(id) INTO resultado     FROM apolices     WHERE cliente_id = cod_cliente;     RAISE NOTICE 'Apolices contabilizadas com sucesso para o cliente %', cod_cliente;     RETURN resultado; EXCEPTION      WHEN OTHERS THEN          RAISE NOTICE 'Erro ao contar apólices para cliente: %', cod_cliente;         RAISE NOTICE '%', SQLERRM;         RAISE NOTICE '%', SQLSTATE;         resultado := 0;         RETURN resultado; END $$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION pr_calcular_indenizacao(sinistro_id INT) RETURNS DECIMAL(10, 2) AS $$ DECLARE      premio DECIMAL(10, 2);     valor_indenizacao DECIMAL(10, 2); BEGIN      SELECT premio INTO premio      FROM apolices      WHERE id IN (SELECT apolice_id FROM Sinistros WHERE id = sinistro_id);     valor_indenizacao := premio * 0.7;     RAISE NOTICE 'Indenização calculada com sucesso para sinistro %', sinistro_id;     RETURN valor_indenizacao; EXCEPTION      WHEN OTHERS THEN          RAISE NOTICE 'Erro ao calcular indenização para sinistro: %', sinistro_id;         RAISE NOTICE '%', SQLERRM;         RAISE NOTICE '%', SQLSTATE;         valor_indenizacao := 0;         RETURN valor_indenizacao; END $$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION pr_count_clientes_ativos() RETURNS INT AS $$ DECLARE      resultado INT; BEGIN      SELECT COUNT(id) INTO resultado      FROM Clientes      WHERE status = 'Ativo';     RAISE NOTICE 'Clientes ativos contabilizados com sucesso';     RETURN resultado; EXCEPTION      WHEN OTHERS THEN          RAISE NOTICE 'Erro ao contar clientes ativos';         RAISE NOTICE '%', SQLERRM;         resultado := 0;         RETURN resultado; END $$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION pr_count_pagamentos_periodo(data_inicio DATE, data_fim DATE) RETURNS INT AS $$ DECLARE      resultado INT; BEGIN      SELECT COUNT(id) INTO resultado      FROM Pagamentos      WHERE data_pagamento BETWEEN data_inicio AND data_fim;     RAISE NOTICE 'Pagamentos no período contabilizados com sucesso';     RETURN resultado; EXCEPTION      WHEN OTHERS THEN          RAISE NOTICE 'Erro ao contar pagamentos no período';         RAISE NOTICE '%', SQLERRM;         resultado := 0;         RETURN resultado; END $$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION pr_count_coberturas_apolice(apolice_id INT) RETURNS INT AS $$ DECLARE      resultado INT; BEGIN      SELECT COUNT(id) INTO resultado      FROM Coberturas      WHERE apolice_id = apolice_id;     RAISE NOTICE 'Coberturas para a apólice contabilizadas com sucesso';     RETURN resultado; EXCEPTION      WHEN OTHERS THEN          RAISE NOTICE 'Erro ao contar coberturas para a apólice';         RAISE NOTICE '%', SQLERRM;         resultado := 0;         RETURN resultado; END $$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION pr_count_apolices_ativas() RETURNS INT AS $$ DECLARE      resultado INT; BEGIN      SELECT COUNT(id) INTO resultado      FROM apolices      WHERE status = 'Ativa';     RAISE NOTICE 'Apolices ativas contabilizadas com sucesso';     RETURN resultado; EXCEPTION      WHEN OTHERS THEN          RAISE NOTICE 'Erro ao contar apólices ativas';         RAISE NOTICE '%', SQLERRM;         resultado := 0;         RETURN resultado; END $$ LANGUAGE plpgsql; 
CREATE OR REPLACE FUNCTION pr_count_sinistros_periodo(data_inicio DATE, data_fim DATE) RETURNS INT AS $$ DECLARE      resultado INT; BEGIN      SELECT COUNT(id) INTO resultado      FROM Sinistros      WHERE data_ocorrencia BETWEEN data_inicio AND data_fim;     RAISE NOTICE 'Sinistros no período contabilizados com sucesso';     RETURN resultado; EXCEPTION      WHEN OTHERS THEN          RAISE NOTICE 'Erro ao contar sinistros no período';         RAISE NOTICE '%', SQLERRM;         resultado := 0;         RETURN resultado; END $$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION pr_count_sinistros_cliente(cod_cliente INT) RETURNS INT AS $$ DECLARE     resultado INT; BEGIN     SELECT COUNT(id) INTO resultado     FROM Sinistros     WHERE cliente_id = cod_cliente;     RAISE NOTICE 'Sinistros contabilizados com sucesso para o cliente %', cod_cliente;     RETURN resultado; EXCEPTION     WHEN OTHERS THEN         RAISE NOTICE 'Erro ao contar sinistros para cliente: %', cod_cliente;         RAISE NOTICE '%', SQLERRM;         resultado := 0;         RETURN resultado; END $$ LANGUAGE plpgsql;
